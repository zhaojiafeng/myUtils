package com.zjf.demo.mode.proxy.dynamic;import com.zjf.demo.mode.proxy.statistic.Car;import com.zjf.demo.mode.proxy.statistic.CarImpl;import java.lang.reflect.Proxy;/** * @author zhaojiafeng */public class DynamicProxyTest {    /**     * Proxy.newProxyInstance()方法接受三个参数：     *              ClassLoader loader:指定当前目标对象使用的类加载器,获取加载器的方法是固定的     *              Class<?>[] interfaces:指定目标对象实现的接口的类型,使用泛型方式确认类型     *              InvocationHandler:指定动态处理器，执行目标对象的方法时,会触发事件处理器的方法     */    public static void main(String[] args) {        Car car = new CarImpl();        Car proxyCar = (Car) Proxy.newProxyInstance(Car.class.getClassLoader(), new Class[]{Car.class}, new DynamicProxyHandler(car));        proxyCar.buyCar();    }}