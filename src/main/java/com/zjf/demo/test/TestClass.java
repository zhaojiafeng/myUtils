package com.zjf.demo.test;import java.nio.charset.StandardCharsets;import java.time.*;import java.time.format.DateTimeFormatter;import java.util.Base64;import java.util.Calendar;import java.util.Date;/** * @author zhaojiafeng */public class TestClass {//    public static void main(String[] args) throws ClassNotFoundException {//        Admin admin = new Admin();//        // 对象的getClass()方法，静态加载（编译时已加载）//        Class clazz = admin.getClass();////        Class类的forName()方法，动态加载，运行时，开始装入类, 并做类的静态初始化//        Class<?> clazz = Class.forName("com.zjf.demo.admin.Admin");////        .class语法， 静态加载（编译时已加载）//        Class clazz = Admin.class;//        System.out.println(clazz.getSimpleName());//    }//    public static void main(String[] args) {//        String str = "demo";//        //base64 encoded 把str转换成base64 bytes//        String encoded = Base64.getEncoder().encodeToString(str.getBytes(StandardCharsets.UTF_8));//        System.out.println("encoded:" + encoded);////        //base64 decoded//        String decoded = new String(Base64.getDecoder().decode(encoded), StandardCharsets.UTF_8);//        System.out.println("decoded:" + decoded);//    }    public static void main(String[] args) {        // 获取当前时间        Instant now = Instant.now();        // T代表东西经0°经线区时：伦敦时间        System.out.println(now);        // 旧日期转为新日期        Instant date = Instant.ofEpochMilli(System.currentTimeMillis());        System.out.println(date);        // 日期文本格式转换为时间格式        Instant date1 = Instant.parse("1993-02-06T10:12:35Z");        System.out.println(date1);        /*         * localDate 只显示年月日         * LocalDateTime.now();获取当前日期时间         * now.minusDays(2);将当前日期时间减去两天         * LocalDateTime.of(2016, 10, 23);构造一个指定日期时间的对象         */        LocalDate ld = LocalDate.now();        System.out.println("localdate:" + ld);        /*         * LocalTime 表示不带时区的时间 只显示时分秒         * LocalTime.now();当前时间         * LocalTime.of(22, 33);确定的时间         * LocalTime.ofSecondOfDay(4503); 一天中的第4503秒         */        LocalTime lt = LocalTime.now();        System.out.println("localtime:" + lt);        //Clock类使用时区来返回当前的纳秒时间和日期,Clock可以替代System.currentTimeMillis()和TimeZone.getDefault()。        Clock clock = Clock.systemUTC();        System.out.println("clock:" + clock);        Instant instant = clock.instant();        System.out.println("instant:" + instant);        /*         * localDateTime    包含了LocalDate和LocalTime的信息，但是不包含ISO-8601日历系统中的时区信息         * LocalDateTime.now();当前时间         * localDateTime.plusHours(25).plusMinutes(3); 当前时间加上25小时３分钟         * LocalDateTime.of(2014, 1, 20, 3, 30, 20)；转换         */        LocalDateTime ldt = LocalDateTime.now();        System.out.println("LocalDateTime:" + ldt);        /*         * ZoneDateTime 含有时区信息的时间 它保存有ISO-8601日期系统的日期和时间，而且有时区信息。         * ZonedDateTime.now();获取包含时区的当前日期时间         * ZonedDateTime.of(LocalDateTime.of(2014, 1, 20, 3, 30, 20), ZoneId.of("+08"));创建时区的日期时间对象         */        // 当前时间        ZonedDateTime zdt = ZonedDateTime.now();        System.out.println(zdt);        // 创建时区的日期时间对象        ZonedDateTime of = ZonedDateTime.of(LocalDateTime.of(1993, 2, 6, 11, 23, 30), ZoneId.of("+08"));        System.out.println(of);        /*         * DateTimeFormatter 格式化日期和解析日期格式字符串。DateTimeFormatter是不可变类         * 格式化：日期对象转换为格式字符串         */        String time = DateTimeFormatter.ofPattern("yyyy.MM.dd HH:mm:ss").format(LocalDateTime.now());        System.out.println(time);        // 格式化        LocalDateTime parse = LocalDateTime.parse("2017.01.01 08:08:08", DateTimeFormatter.ofPattern("yyyy.MM.dd HH:mm:ss"));        System.out.println(parse);        //Duration 它持有的时间精确到秒和纳秒。这使得我们可以很容易得计算两个日期之间的不同        LocalDateTime start = LocalDateTime.of(2016, Month.JULY, 20, 18, 18);        LocalDateTime end = LocalDateTime.of(2017, Month.JULY, 20, 18, 18);        Duration dur = Duration.between(start, end);        System.out.println("2个时间差为：" + dur.toDays() + "day" + "\t" + dur.compareTo(Duration.ZERO));        /*         * 遗留代码操作         * Date --> Instant         * Calendar-->Instant         */        Instant timestamp = new Date().toInstant();        Instant ins = Calendar.getInstance().toInstant();        System.out.println(timestamp);        System.out.println(ins);    }}