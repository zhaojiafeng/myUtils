package com.zjf.demo.commons;import java.util.DoubleSummaryStatistics;import java.util.List;import java.util.function.ToDoubleFunction;import java.util.stream.Collectors;/** * @author zhaojiafeng */public class CalculateUtils {    /**     * 获取平均分     *     * @param modelList list列表     * @param function  获取double的函数表达式     */    private static <T> double average(List<T> modelList, ToDoubleFunction<T> function) {//        return modelList.stream().collect(Collectors.averagingDouble(function));        return summaryStatistics(modelList, function).getAverage();    }    /**     * 获取最小值     *     * @param modelList list列表     * @param function  获取double的函数表达式     */    private static <T> double min(List<T> modelList, ToDoubleFunction<T> function) {//        Optional<T> model = modelList.stream().min(Comparator.comparingDouble(function));        return summaryStatistics(modelList, function).getMin();    }    /**     * 获取最大值     *     * @param modelList list列表     * @param function  获取double的函数表达式     */    private static <T> double max(List<T> modelList, ToDoubleFunction<T> function) {//        Optional<T> model = modelList.stream().max(Comparator.comparingDouble(function));        return summaryStatistics(modelList, function).getMax();    }    /**     * 获取和     *     * @param modelList list列表     * @param function  获取double的函数表达式     */    private static <T> double sum(List<T> modelList, ToDoubleFunction<T> function) {        return summaryStatistics(modelList, function).getSum();    }    /**     * 获总数     *     * @param modelList list列表     * @param function  获取double的函数表达式     */    private static <T> double count(List<T> modelList, ToDoubleFunction<T> function) {        return summaryStatistics(modelList, function).getCount();    }    /**     * 获取doubleSummaryStatistics     *     * @param modelList list列表     * @param function  获取double的函数表达式     */    private static <T> DoubleSummaryStatistics summaryStatistics(List<T> modelList, ToDoubleFunction<T> function) {        return modelList.stream().collect(Collectors.summarizingDouble(function));    }}